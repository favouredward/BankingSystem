
using BankingSystem.Application.Features.Accounts;
using BankingSystem.Domain.DTOs;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Security.Claims;
using System.Threading.Tasks;

namespace BankingSystem.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] 
    public class AccountsController : ControllerBase
    {
        private readonly IMediator _mediator;

        public AccountsController(IMediator mediator)
        {
            _mediator = mediator;
        }

        
        private string GetCurrentUserId()
        {
            return User.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        [HttpPost]
        public async Task<IActionResult> CreateAccount()
        {
            try
            {
                // SECURITY FIX 1: Retrieve the authenticated user's ID (OwnerId) from the token.
                var ownerId = GetCurrentUserId();
                if (string.IsNullOrEmpty(ownerId))
                {
                    return Unauthorized("User identity could not be determined.");
                }

                // The Command is created ONLY with the necessary authentication context (OwnerId).
                var command = new CreateAccountCommand(ownerId);

                // The handler generates the account number and saves the account.
                var accountId = await _mediator.Send(command);

                // Return the new AccountId, OwnerId, and the system-generated AccountNumber.
                return Ok(new
                {
                    AccountId = accountId,
                    OwnerId = ownerId,
                    AccountNumber = command.AccountNumber // Retrieve the number generated by the handler
                });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "An error occurred while creating the account.");
            }
        }

  
        [HttpPost("deposit")]
        public async Task<IActionResult> Deposit([FromBody] DepositDto dto)
        {
            try
            {
                // SECURITY FIX 2: Get the authenticated user ID and pass it to the command.
                var currentUserId = GetCurrentUserId();
                if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

                var command = new DepositCommand(dto) { InitiatingUserId = currentUserId };
                await _mediator.Send(command);
                return Ok("Deposit successful.");
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                var innerEx = ex.InnerException;
                if (innerEx is ArgumentException || innerEx is InvalidOperationException)
                {
                    return BadRequest(innerEx.Message);
                }
                return StatusCode(500, "An error occurred while processing the deposit.");
            }
        }

        [HttpPost("withdraw")]
        public async Task<IActionResult> Withdraw([FromBody] WithdrawalDto dto)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

                var command = new WithdrawalCommand(dto) { InitiatingUserId = currentUserId };
                await _mediator.Send(command);
                return Ok("Withdrawal successful.");
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                if (ex.InnerException is InvalidOperationException || ex.InnerException is ArgumentException)
                {
                    return BadRequest(ex.InnerException.Message);
                }
                return StatusCode(500, "An error occurred while processing the withdrawal.");
            }
        }

        [HttpPost("transfer")]
        public async Task<IActionResult> Transfer([FromBody] TransferDto dto)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

                // Ownership check on the SOURCE account is enforced in the handler
                var command = new TransferCommand(dto) { InitiatingUserId = currentUserId };
                await _mediator.Send(command);
                return Ok("Transfer successful.");
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                if (ex.InnerException is InvalidOperationException || ex.InnerException is ArgumentException)
                {
                    return BadRequest(ex.InnerException.Message);
                }
                return StatusCode(500, "An error occurred while processing the transfer.");
            }
        }


        [HttpGet("{accountId}")]
        public async Task<IActionResult> GetAccountDetails(Guid accountId)
        {
            try
            {
                // SECURITY FIX 3: Enforce ownership check for retrieving account details.
                var currentUserId = GetCurrentUserId();
                if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

                var query = new GetAccountDetailsQuery(accountId) { InitiatingUserId = currentUserId };

                var accountDetails = await _mediator.Send(query);

                // The handler returns null if the account doesn't exist OR the user doesn't own it.
                if (accountDetails == null)
                {
                    return NotFound("Account not found.");
                }

                return Ok(accountDetails);
            }
            catch (ArgumentException ex)
            {
                return NotFound(ex.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "An error occurred while retrieving the account details.");
            }
        }

      
        [HttpGet("{accountId}/transactions")]
        public async Task<IActionResult> GetTransactionHistory(Guid accountId)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

                var query = new GetTransactionHistoryQuery(accountId) { InitiatingUserId = currentUserId };

                var transactions = await _mediator.Send(query);

                if (transactions == null)
                {
                    // Generic error to avoid leaking information about accounts the user doesn't own.
                    return NotFound("Account not found or access denied.");
                }

                return Ok(transactions);
            }
            catch (InvalidOperationException ex)
            {
                return NotFound(ex.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "An error occurred while retrieving the transaction history.");
            }
        }
    }
}
